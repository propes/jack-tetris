class BrickArray {
    field Array array;
    field int _rows, _columns;

    constructor BrickArray new(int rows, int columns) {
        let _rows = rows;
        let _columns = columns;
        let array = Array.new(rows * columns);
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method Array getArray() {
        return array;
    }

    method Brick getItem(int row, int column) {
        return array[getIndex(row, column)];
    }

    method boolean hasItem(int row, int column) {
        if (row < 0) {
            return false;
        }
        if (getItem(row, column) = null) {
            return false;
        }
        return true;
    }

    method void add(Brick brick) {
        var int index;
        let index = getIndex(brick.getRow(), brick.getColumn());
        let array[index] = brick;
        return;
    }

    method int getIndex(int row, int column) {
        return row * _columns + column;
    }

    method int rowCount(int row) {
        var int col, count;

        let count = 0;
        while (col < _columns) {
            if (~(getItem(row, col) = null)) {
                let count = count + 1;
            }
            let col = col + 1;
        }

        return count;
    }
}